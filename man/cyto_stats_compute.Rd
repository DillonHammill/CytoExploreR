% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cyto_stats_compute.R
\name{cyto_stats_compute}
\alias{cyto_stats_compute}
\title{Compute, export and save statistics}
\usage{
cyto_stats_compute(
  x,
  alias = NULL,
  parent = NULL,
  channels = NULL,
  trans = NULL,
  stat = NULL,
  gate = NULL,
  inverse = TRUE,
  round = 2,
  format = "wide",
  tibble = FALSE,
  input = "matrix",
  smooth = 1,
  bandwidth = NA,
  details = TRUE,
  markers = TRUE,
  save_as = NULL,
  select = NULL,
  ...
)
}
\arguments{
\item{x}{object of class \code{\link[flowWorkspace:cytoset]{cytoset}},
\code{\link[flowWorkspace:GatingHierarchy-class]{GatingHierarchy}} or
\code{\link[flowWorkspace:GatingSet-class]{GatingSet}}.}

\item{alias}{names of the populations in the \code{GatingHerarchy} or
\code{GatingSet} for which statistics should be computed.}

\item{parent}{names of the parent populations in the \code{GatingHierarchy}
or \code{GatingSet} required when computing frequency statistics. When
\code{stat = "freq"} the frequency of each \code{alias} population will be
computed as a proportion of each \code{parent} population.}

\item{channels}{names of the channels or markers for which statistics should
be computed, set to all channels with marker assignments by default.}

\item{trans}{an object of class \code{transformerList} containing the
transformers used to transform the channels of the supplied data. The
transformerList will be automatically extracted from the
\code{GatingHierarchy} or \code{GatingSet}, so this argument is only
required for \code{cytoframes} or \code{cytosets}. The transformerList is
passed to \code{\link{cyto_apply}} which will make sure the data is
appropriately transformed based on \code{inverse} prior to passing the data
to the desired statistical function.}

\item{stat}{name of a statistic to compute, options include: \itemize{
\item{\code{count} - number of events} \item{\code{freq/percent} -
frequency of population(s) in parent population(s)} \item{\code{mean} -
arithmetic mean} \item{\code{geomean} - geometric (graphical) mean computed
as the inverse of the arithmetic mean on the transformed scale}
\item{\code{median} - 50th quantile} \item{\code{mode} - inverse of mode on
transformed scale computed using \code{smooth} and \code{bandwidth} to
control the smoothness of the density distribution} \item{\code{sd} -
standard deviation} \item{\code{rsd} - robust standard deviation (less
influence of outliers)} \item{\code{cv} - coefficient of variation}
\item{\code{rcv} - robust coefficient of variation (less influence of
outliers)} \item{\code{quantile} - quantiles with probabilities supplied to
\code{probs}} \item{\code{range} - minima and maxima} \item{\code{auc} -
area under curve using a combination of
\code{\link[stats:density]{density()}},
\code{\link[stats:splinefun]{splinefun()}} and
\code{\link[stats:integrate]{integrate()}}}} \code{stat} dispatches through
\code{\link{cyto_apply}} so any custom function can be named through this
argument as well. See \code{\link{cyto_apply}} for details.}

\item{gate}{a \code{rectangleGate}, \code{polygonGate} or
\code{ellipsoidGate} object to apply to each \code{cytoframe} prior to
computing the desired statistic. This argument has been included for
backwards compatibility only and is only valid for \code{cytoframe} or
\code{cytoset} objects.}

\item{inverse}{logical passed to \code{\link{cyto_apply}} to indicate whether
transformations applied to the data should be reversed prior to passing the
data to the desired statistical function, set to TRUE by default.}

\item{round}{numeric indicating the number of decimal places to round the
computed statistic, set to 2 decimal places by default.}

\item{format}{can be either \code{"wide"} or \code{"long"} to control the
format of the returned statistics, set to \code{"wide"} by default.}

\item{tibble}{logical indicating whether the statistics should be returned as
tibble instead of a data.frame, set to FALSE by default.}

\item{input}{passed to \code{\link{cyto_apply}} to control how the data is
formatted prior to passing it to the statistical function, options include:
\itemize{ \item{1 - \code{"cytoframe"}} \item{2 - \code{"matrix"}} \item{3
- \code{"column"} or \code{"channel"}} \item{4 - \code{"row"} or
\code{"cell"}}} Set to "matrix" by default.}

\item{smooth}{numeric smoothing parameter passed to \code{stats:density} when
computing mode and area under the curve statistics, set to 1 by default.}

\item{bandwidth}{numeric passed to \code{stats:density} to set the bandwidth
when computing mode or area under the curve statistics, set to NULL by
default. If the bandwidth is not supplied or NA, a bandwidth will be
estimated based on all samples supplied to \code{cyto_stats_compute()}.}

\item{details}{logical indicating whether to include the \code{cyto_details}
in the output, set to TRUE by default.}

\item{markers}{logical indicating whether channels should be converted to
markers where possible in the output, set to TRUE by default.}

\item{save_as}{name of a csv file to which the output should be saved, set to
NULL by default to bypass this saving step.}

\item{select}{named list containing experimental variables to be used to
select samples using \code{\link{cyto_select}} when a \code{cytoset} or
\code{GatingSet} is supplied. Refer to \code{\link{cyto_select}} for more
details.}

\item{...}{additional arguments passed to the desired statistical function.}
}
\value{
data.frame or tibble containing the computed statistics in the
  desired format and optionally a csv file containing the computed
  statistics.
}
\description{
Compute, export and save statistics
}
\examples{
library(CytoExploreRData)

# Load in samples
fs <- Activation
gs <- GatingSet(fs)

# Compensation
gs <- cyto_compensate(gs)

# Transformations
gs <- cyto_transform(gs)

# Gating
gs <- cyto_gatingTemplate_apply(gs, Activation_gatingTemplate)

# Compute statistics - median
cyto_stats_compute(gs,
  alias = "T Cells",
  channels = c("Alexa Fluor 488-A", "PE-A"),
  stat = "median"
)

# Name csv to save results
tempfile <- paste0(tempdir(),
.Platform$file.sep,
"Population-Frequencies.csv")

# Compute frequencies and save to tempfile
cyto_stats_compute(gs,
  alias = c("CD4 T Cells", "CD8 T Cells"),
  parent = c("Live Cells", "T Cells"),
  stat = "freq",
  save_as = tempfile
)

}
\author{
Dillon Hammill, \email{Dillon.Hammill@anu.edu.au}
}

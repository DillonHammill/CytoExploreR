% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cyto_stats_compute.R
\name{cyto_stats_compute.GatingHierarchy}
\alias{cyto_stats_compute.GatingHierarchy}
\title{Compute Statistics - GatingHierarchy Method}
\usage{
\method{cyto_stats_compute}{GatingHierarchy}(x, alias = NULL,
  parent = NULL, channels = NULL, trans = NA, stat = "median",
  format = "long", save_as = NULL, density_smooth = 0.6, ...)
}
\arguments{
\item{x}{object of class
\code{\link[flowWorkspace:GatingHierarchy-class]{GatingHierarchy}}.}

\item{alias}{name(s) of the population(s) for which the statistic should be
calculated.}

\item{parent}{name(s) of the parent population(s) used calculate population
frequencies. The frequency of alias in each parent will be returned as a
percentage.}

\item{channels}{names of of channels for which statistic should be
calculated, set to all channels by default.}

\item{trans}{object of class
\code{\link[flowCore:transformList-class]{transformList}} or
\code{\link[flowWorkspace:transformerList]{transformerList}} generated by
\code{\link[flowCore:logicleTransform]{estimateLogicle}} used to transform
the fluorescent channels of x. The transformation list is required to apply
the inverse transformation such that the required statistics are returned
on the original linear scale.}

\item{stat}{name of the statistic to calculate, options include
\code{"count"}, \code{"freq"}, \code{"median"}, \code{"mode"},
\code{"mean"}, \code{"geo mean"}, \code{"CV"}, or \code{"freq"}.}

\item{format}{indicates whether the data should be returned in the
\code{"wide"} or \code{"long"} format, set to the \code{"long"} format by
default.}

\item{save_as}{name of a csv file to which the statistical results should be
saved.}

\item{density_smooth}{smoothing parameter passed to
\code{\link[stats:density]{density}} when calculating mode, set to 1.5 by
default.}

\item{...}{not in use.}
}
\value{
a tibble containing the computed statistics in the wide or long
  format.
}
\description{
Calculate and export flow cytometry statistics for a GatingHierarchy.
}
\examples{
library(CytoRSuiteData)

# Load in samples
fs <- Activation
gs <- GatingSet(fs)

# Apply compensation
gs <- compensate(gs, fs[[1]]@description$SPILL)

# Transform fluorescent channels
trans <- estimateLogicle(gs[[32]], cyto_fluor_channels(gs))
gs <- transform(gs, trans)

# Gate using gate_draw
gt <- Activation_gatingTemplate
gating(gt, gs)

# Compute statistics
cyto_stats_compute(gs[[32]],
  alias = "T Cells",
  channels = c("Alexa Fluor 488-A", "PE-A"),
  stat = "median"
)

# Compute population frequency statistics
cyto_stats_compute(gs[[32]],
  alias = c("CD4 T Cells", "CD8 T Cells"),
  parent = c("Live Cells", "T Cells"),
  stat = "freq"
)

# Save calculated statistics to csv file - save_as
cyto_stats_compute(gs[[32]],
  alias = c("CD4 T Cells", "CD8 T Cells"),
  parent = c("Live Cells", "T Cells"),
  stat = "freq",
  save_as = "Population-Frequencies"
)
}
\seealso{
\code{\link{cyto_stats_compute,flowFrame-method}}

\code{\link{cyto_stats_compute,flowSet-method}}
}
\author{
Dillon Hammill, \email{Dillon.Hammill@anu.edu.au}
}

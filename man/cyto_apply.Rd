% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cyto-helpers.R
\name{cyto_apply}
\alias{cyto_apply}
\alias{cyto_apply.list}
\alias{cyto_apply.GatingSet}
\alias{cyto_apply.GatingHierarchy}
\alias{cyto_apply.flowSet}
\alias{cyto_apply.flowFrame}
\title{Apply a function to elements of cytoframe, cytoset, GatingHierarchy or
GatingSet}
\usage{
\method{cyto_apply}{list}(
  x,
  FUN,
  ...,
  simplify = TRUE,
  input = "cytoframe",
  parent = NULL,
  copy = TRUE,
  channels = NULL,
  trans = NA,
  inverse = FALSE
)

\method{cyto_apply}{GatingSet}(
  x,
  FUN,
  ...,
  simplify = TRUE,
  input = "cytoframe",
  parent = NULL,
  copy = TRUE,
  channels = NULL,
  trans = NA,
  inverse = FALSE
)

\method{cyto_apply}{GatingHierarchy}(
  x,
  FUN,
  ...,
  simplify = TRUE,
  input = "cytoframe",
  parent = NULL,
  copy = TRUE,
  channels = NULL,
  trans = NA,
  inverse = FALSE
)

\method{cyto_apply}{flowSet}(
  x,
  FUN,
  ...,
  simplify = TRUE,
  input = "cytoframe",
  copy = TRUE,
  channels = NULL,
  trans = NA,
  inverse = FALSE
)

\method{cyto_apply}{flowFrame}(
  x,
  FUN,
  ...,
  simplify = TRUE,
  input = "cytoframe",
  copy = TRUE,
  channels = NULL,
  trans = NA,
  inverse = FALSE
)
}
\arguments{
\item{x}{object of class \code{cytoframe}, \code{cytoset},
\code{GatingHierarchy}, \code{GatingSet} or a list of these objects.}

\item{FUN}{name of a function to apply to each element of \code{x}.}

\item{...}{additional arguments passed to \code{FUN}. Multiple arguments are
supported but must be named, see examples below.}

\item{simplify}{logical indicating whether attempts should be made to coerce
the output to a \code{cytoset} or \code{matrix}, set to TRUE by default. A
\code{cytoframe} or \code{cytoset} will be returned for
\code{GatingHierarchy} and \code{GatingSet} objects respectively.}

\item{input}{indicates the data input format as required by \code{FUN} can be
either 1 - "cytoframe", 2 - "matrix", 3 - "column" or 4 - "row", set to
"cytoframe" by default. \code{cyto_apply} will take care of all the data
formatting prior to passing it \code{FUN}. The \code{"column"} and
\code{"row"} options are for functions that expect vectors as the input.}

\item{parent}{name of the parent population to extract from
\code{GatingHierarchy} or \code{GatingSet} objects, set to \code{"root"} by
default.}

\item{copy}{logical indicating whether the indicated function should be
applied to a copy of each \code{cytoframe}, set to TRUE by default. Apply
the function to a copy of each \code{cytoframe} ensures that the underlying
data remains unchanged.}

\item{channels}{vector of channels which should be included in the data
passed to \code{FUN}, set to all channels by default.}

\item{trans}{object of class \code{transformerList} containing the
definitions of the transformers applied to the supplied data. These
transformers are required to inverse transformations when \code{inverse =
TRUE}.}

\item{inverse}{logical indicating whether each \code{cytoframe} should be
inverse transformed prior to applying \code{FUN}.}
}
\description{
\code{cyto_apply} is convenient wrapper around \code{lapply} and \code{apply}
to apply a function to a \code{cytoframe}, \code{GatingHierarchy} or over
elements of a \code{cytoset}, \code{GatingSet} or list of \code{cytoframes}.
\code{cyto_apply} is extremely flexible by supporting functions that accept
the data in either \code{cytoframe}, \code{matrix} or \code{vector} formats.
All the data processing steps are handled internally prior to passing the
data to the specified function. It is important that the arguments in
\code{FUN} do not conflict with the arguments of \code{cyto_apply} and they
should be supplied to \code{cyto_apply} by name.
}
\examples{
library(CytoExploreRData)
library(flowWorkspace)

# Activation cytoset
fs <- Activation
cs <- flowSet_to_cytoset(fs)

# Compute quantiles
cyto_apply(cs,
cyto_quantile,
probs = c(0.05, 0.95),
na.rm = TRUE,
input = 3)

}
\author{
Dillon Hammill, \email{Dillon.Hammill@anu.edu.au}
}

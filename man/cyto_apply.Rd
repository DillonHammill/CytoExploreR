% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cyto-helpers.R
\name{cyto_apply}
\alias{cyto_apply}
\alias{cyto_apply.list}
\title{Apply a function to elements of cytoset, GatingHierarchy or GatingSet}
\usage{
\method{cyto_apply}{list}(
  x,
  FUN,
  ...,
  parent = "root",
  select = NULL,
  coerce = FALSE,
  events = 1,
  input = "cytoframe",
  copy = FALSE,
  channels = NULL,
  trans = NA,
  inverse = FALSE,
  slot = NULL,
  simplify = TRUE
)
}
\arguments{
\item{x}{object of class \code{\link[flowWorkspace:cytoset]{cytoset}},
\code{\link[flowWorkspace:GatingHierarchy-class]{GatingHierarchy}},
\code{\link[flowWorkspace:GatingSet-class]{GatingSet}}.}

\item{FUN}{name of a function to apply to each element of \code{x}.}

\item{...}{additional arguments passed to \code{FUN}. Multiple arguments are
supported but must be named, see examples below.}

\item{parent}{name of the parent(s) population to extract from
\code{GatingHierarchy} or \code{GatingSet} objects, set to \code{"root"} by
default.}

\item{select}{passed to \code{cyto_select()} to select the samples upon which
the function should be applied, set to NULL by default to use all supplied
samples.}

\item{coerce}{logical passed to \code{cyto_coerce()} to indicate whether the
data should be coerced prior to applying the specified function, set to
FALSE by default.}

\item{events}{numeric passed to \code{cyto_sample()} to control the number of
events over which the specified function is to be applied, set to 1 by
default to use all events.}

\item{input}{indicates the data input format as required by \code{FUN} can be
either 1 - "cytoset", 2 - "cytoframe", 3 - "matrix", 4 - "column" or 5 -
"row", set to "cytoframe" by default. \code{cyto_apply} will take care of
all the data formatting prior to passing it \code{FUN}. The \code{"column"}
and \code{"row"} options are for functions that expect vectors as the
input. Although not indexed here, \code{data.frame}, \code{data.table} and
\code{tibble} are also acceptable input formats.}

\item{copy}{logical indicating whether the data should be copied prior to
preprocessing the data, set to FALSE by default. Users should set this
argument to TRUE when apply inverse transformations to ensure that the
original data remains unchanged.}

\item{channels}{vector of channels which should be included in the data
passed to \code{FUN}, set to all channels by default.}

\item{trans}{object of class \code{transformerList} containing the
definitions of the transformers applied to the supplied data. These
transformers are only required when a cytoset is supplied to inverse
transformations when \code{inverse = TRUE}.}

\item{inverse}{logical indicating whether the data should be inverse
transformed prior to applying \code{FUN}, set to FALSE by default.}

\item{slot}{allows extraction of particular data from the output of
\code{FUN}, it can be either a be the name of  a function or the name of a
slot to extract from a list or an array (i.e. column name), set to NULL by
default to return the entire object returned by \code{FUN}.}

\item{simplify}{logical indicating whether attempts should be made to coerce
the output to a \code{cytoset} or \code{matrix}, set to TRUE by default.}
}
\description{
\code{cyto_apply} is convenient wrapper around \code{lapply} and \code{apply}
to apply a function over elements of a \code{cytoset}, \code{GatingHierarchy}
or \code{GatingSet}. \code{cyto_apply} is extremely flexible by supporting
functions that accept the data in either \code{cytoset}, \code{cytoframe},
\code{matrix} or \code{vector} formats. All the data processing steps are
handled internally by \code{\link{cyto_data_extract}} prior to passing the
data to the specified function. It is important that the arguments in
\code{FUN} do not conflict with the arguments of \code{cyto_apply} and they
should be supplied to \code{cyto_apply} by name.
}
\examples{
# Activation Gatingset
gs <- load_gs(system.file("extdata/Activation-GatingSet",
                          package = "CytoExploreRData"))

# Compute CD44 & CD69 quantiles for CD4 T Cells & CD8 T Cells
cyto_apply(gs,
"quantile",
probs = c(0.25, 0.5, 0.75),
na.rm = TRUE,
input = "column",
parent = c("CD4 T Cells", "CD8 T Cells"),
channels = c("CD44", "CD69"))

}
\author{
Dillon Hammill, \email{Dillon.Hammill@anu.edu.au}
}
